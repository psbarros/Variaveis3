== SUBMITION (2019-05-02 00:37:50) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if(a≤x≤b):
	print(x,"pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.190893
-- ERROR:
  File "/home/codebench/codes/1689/1103/main.py", line 7
    if(a\u2264x\u2264b):
           ^
SyntaxError: invalid character in identifier

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:37:53) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if(a≤x≤b):
	print(x,"pertence ao intervalo",a,",",b)
-- ERROR:
File "XXXX", line 7
    if(a≤x≤b):
           ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:39:37) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
-- ERROR:
File "XXXX", line 7
    if(a≤x≤b):
           ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:41:40) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:44:23) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
	print("Entradas",a,"e","invalidas")
-- ERROR:
File "XXXX", line 12
    print("Entradas",a,"e","invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:44:54) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
	print("Entradas",a,"e",b,"invalidas")
-- ERROR:
File "XXXX", line 12
    print("Entradas",a,"e",b,"invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:45:06) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
	print("Entradas:",a,"e",b,"invalidas")
-- ERROR:
File "XXXX", line 12
    print("Entradas:",a,"e",b,"invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:45:48) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
		print("Entradas",a,"e",b,"invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:46:22) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
		print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.249741
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:47:05) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
		print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.212263
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:47:07) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
		print("Entradas",a,"e",b,"invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:48:01) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
	if(b<=a):
		print("Entradas",a,"e",b,"invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:48:43) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
		print("Entradas",a,"e",b,"invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:49:55) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:50:13) 
-- CODE:
#  b>a. Um número real x pertence ao intervalo [a,b] se a≤x≤b.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("x"))
a=float(input("a"))
b=float(input("b"))
if((x>=a) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.162649
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
