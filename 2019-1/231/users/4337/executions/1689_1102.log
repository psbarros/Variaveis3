== TEST (2019-05-02 10:55:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tank: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,h,r)


-- OUTPUT:
Entradas: 11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:56:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,h,r)


-- OUTPUT:
Entradas: 11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:56:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:08:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VT = VCI + VE
if(H > 0 and h > 0 and r > 0)
	if(h >= (VE / 2)):
	print("Volume:",VE)
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 18
    if(H > 0 and h > 0 and r > 0)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:08:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VT = VCI + VE
if(H > 0 and h > 0 and r > 0)
	if(h >= (VE / 2)):
	print("Volume:")
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 18
    if(H > 0 and h > 0 and r > 0)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:08:50) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VT = VCI + VE
if(H > 0 and h > 0 and r > 0):
	if(h >= (VE / 2)):
	print("Volume:")
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 20
    print("Volume:")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:09:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VT = VCI + VE
if(H > 0 and h > 0 and r > 0):
	if(h >= (VE / 2)):
		print("Volume:")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:09:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VT = VCI + VE
if(H > 0 and h > 0 and r > 0):
	if(h >= (VE / 2)):
		print("Volume:")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:11:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VT = VCI + VE
if(H > 0 and h > 0 and r > 0):
	if(h <= (VE / 2)):
		print("Volume:",VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 42.69214976718286 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:19:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(h <= (VE / 2)):
		print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	if(h > VCI + (VE / 2)):
		print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 42.69214976718286 litros
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:26:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:26:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:27:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",round(VNC,2),"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:27:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",round(VNC,2),"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:27:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",round(VNC,2),"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:28:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:28:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:29:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:29:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:30:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print("Volume:",VNC,"litros")
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 120.21094849451102 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:31:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:31:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2)):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:32:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:32:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:33:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - r)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:35:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * H
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:35:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (r + h)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:36:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (r + h)
VE = (4/3) * pi * (r ** 3)
VCA = (pi/3) * ((H-h) ** 2) * (3 * r - (H-h))
VNC = (VE / 2) + VCI
VT = VCI + VE
if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	#if(h <= (VE / 2)):
		#print("Volume:",VCA,"litros")
	if(h <= VCI + (VE / 2) and h <= H):
		print(VNC)
	#if(h > VCI + (VE / 2)):
		#print("Volume",VCI + VE - VCA,"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
158.43470631073802
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:48:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

VCI = pi * (r ** 2) * (H - 2 * r)
VE = (4 / 3) * pi * (r ** 3)
VCEI = (pi / 3) *( (r - h)**2 ) * (3 * r - (r - h))
VI = (VE / 2) + pi * (r ** 2) * h
VT = VCI + VE

print(VI)
#f(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:57:16) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * h
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)

print(VC1)
#f(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
120.21094849451102
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:58:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)

print(VC1)
#f(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:02:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT == Vinf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1,2),"litros")
else:
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    VT == Vinf or VC1 or VS
NameError: name 'VT' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:02:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = Vinf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1,2),"litros")
else:
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    VT = Vinf or VC1 or VS
NameError: name 'Vinf' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:02:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:04:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1,2),"litros")
	if(VT > VC1 and VT <= VInf):
		print("Volume",round(VInf,2),"litros")
	if(VT > VInf):
		print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
Volume 124.69 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:05:16) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1,2),"litros")
	#if(VT > VC1 and VT <= VInf):
		#print("Volume",round(VInf,2),"litros")
	#if(VT > VInf):
		#print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:05:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1,2),"litros")
	#if(VT > VC1 and VT <= VInf):
		#print("Volume",round(VInf,2),"litros")
	#if(VT > VInf):
		#print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:05:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1*1000,2),"litros")
	#if(VT > VC1 and VT <= VInf):
		#print("Volume",round(VInf,2),"litros")
	#if(VT > VInf):
		#print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:06:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS
print(VC1)

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1*1000,3),"litros")
	#if(VT > VC1 and VT <= VInf):
		#print("Volume",round(VInf,2),"litros")
	#if(VT > VInf):
		#print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.98719067828401
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:06:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS

if(H > 0 and h > 0 and r > 0 and H > h and H > 2 * r):
	if(VT <= VC1):
		print("Volume",round(VC1*1000,3),"litros")
	#if(VT > VC1 and VT <= VInf):
		#print("Volume",round(VInf,2),"litros")
	#if(VT > VInf):
		#print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:07:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

x1 = (r - h)
x2 = (H - h)
VInf = (pi/3) *(x1**2)*(3 * r - x1)
VE = (4 / 3) * pi * (r ** 3)
VC = pi * (r ** 2) * (H - 2 * r)
VC1 = (VE / 2) + pi * (r ** 2) * (h - r)
VS = (VE / 2) + VC + (pi / 3) * (x2 ** 2) * (3 * r - x2)
VT = VInf or VC1 or VS

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(VT <= VC1):
		print("Volume",round(VC1*1000,3),"litros")
	#if(VT > VC1 and VT <= VInf):
		#print("Volume",round(VInf,2),"litros")
	#if(VT > VInf):
		#print("Volume",round(VS,2),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 12:24:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume",round(vol * 1000,3),"litros")
	elif:
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume",round(vol * 1000,3),"litros")
	elif:
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume",round(vol * 1000,3),"litros")
	elif:
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r - (H-h))
		print("Volume",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.150041
-- ERROR:
  File "/home/codebench/codes/1689/1102/main.py", line 18
    elif:
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 12:25:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < r):
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h == H -r):
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < H - r and h >r):
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r)
		print("Volume",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.172484
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:26:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

from math import *

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < r):
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h == H -r):
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < H - r and h >r):
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r)
		print("Volume",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 12:26:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

from math import *

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < r):
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h == H -r):
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < H - r and h >r):
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r)
		print("Volume",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.178225
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 12:27:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

from math import *

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < r):
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h == H -r):
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < H - r and h >r):
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r- (H-h))
		print("Volume",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.147297
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:27:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

from math import *

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < r):
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h == H -r):
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume",round(vol * 1000,3),"litros")
	elif(h < H - r and h >r):
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r- (H-h))
		print("Volume",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 12:28:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel: "))
r = float(input("Digite o raio: "))

print("Entradas:",H,",",h,",",r)

from math import *

if((H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2 * r)):
	if(h == r):
		vol = ((4/3) * pi * (r ** 3))/2
		print("Volume:",round(vol * 1000,3),"litros")
	elif(h < r):
		vol = (pi / 3) * (h ** 2) * (3 * r - h)
		print("Volume:",round(vol * 1000,3),"litros")
	elif(h == H -r):
		vol = pi * (r ** 2) * (H - 2 * r) + (2/3) * pi * (r ** 3)
		print("Volume:",round(vol * 1000,3),"litros")
	elif(h < H - r and h >r):
		vol = pi * (r ** 2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("Volume:",round(vol * 1000,3),"litros")
	else:
		vol = pi * (r ** 2) * (H - 2 * r) + (4/3) * pi * (r**3) * (pi/3)*((H-h)**2) * (3 * r- (H-h))
		print("Volume:",round(vol * 1000,3),"litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.125351
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
