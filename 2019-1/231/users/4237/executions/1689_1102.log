== SUBMITION (2019-05-02 13:53:21) 
-- CODE:
from math import*
H= float(input("Digite a altura total do tanque: "))
h= float(input("Digite o nivel de combustivel  no tanque: "))
r= float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ",H,",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>2*r)):
	if(h==r):
		v= ((4/3)*pi*(r**3))/2
		print("Volume:", (round((v*1000), 3)), "litros")
	elif(h<r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:",(v*1000),"litros")
	elif(h==H-r):
		v= round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)), 3)
		print("Volume:", (round((v*1000), 3)), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("Volume:", (round((v*1000), 3)), "litros")
	else: 
		v= pi*(r**2)*(H-2*r)+(4/3)*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("Volume:",(round((v*1000)), 3), "litros")
else: 
	print("Entradas invalidas")
-- EXECUTION TIME:
0.145406
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 14:05:24) 
-- CODE:
from math import*
H= float(input("Digite a altura total do tanque: "))
h= float(input("Digite o nivel de combustivel  no tanque: "))
r= float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ",H,",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>2*r)):
if(h==r):
	volu = ((4/3)*pi*(r**3))/2
	print("Volume:", (round((v*1000), 3)), "litros")
elif(h<r):
	volu = (pi/3)*(h**2)*(3*r-h)
	print("Volume:",(v*1000),"litros")
elif(h==H-r):
	volu = round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)), 3)
	print("Volume:", (round((v*1000), 3)), "litros")
elif(h<H-r and h>r):
	volu= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
	print("Volume:", (round((v*1000), 3)), "litros")
else: 
	volu= pi*(r**2)*(H-2*r)+(4/3)*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
	print("Volume:",(round((v*1000)), 3), "litros")
else: 
	print("Entradas invalidas")
-- EXECUTION TIME:
0.112148
-- ERROR:
  File "/home/codebench/codes/1689/1102/main.py", line 9
    if(h==r):
     ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 14:06:19) 
-- CODE:
from math import*
H= float(input("Digite a altura total do tanque: "))
h= float(input("Digite o nivel de combustivel  no tanque: "))
r= float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ",H,",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>2*r)):
if(h==r):
	volu = ((4/3)*pi*(r**3))/2
	print("Volume:", (round((volu*1000), 3)), "litros")
elif(h<r):
	volu = (pi/3)*(h**2)*(3*r-h)
	print("Volume:",(volu*1000),"litros")
elif(h==H-r):
	volu = round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)), 3)
	print("Volume:", (round((volu*1000), 3)), "litros")
elif(h<H-r and h>r):
	volu= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
	print("Volume:", (round((volu*1000), 3)), "litros")
else: 
	volu= pi*(r**2)*(H-2*r)+(4/3)*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
	print("Volume:",(round((volu*1000)), 3), "litros")
else: 
	print("Entradas invalidas")
-- EXECUTION TIME:
0.124733
-- ERROR:
  File "/home/codebench/codes/1689/1102/main.py", line 9
    if(h==r):
     ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 14:06:47) 
-- CODE:
from math import*
H= float(input("Digite a altura total do tanque: "))
h= float(input("Digite o nivel de combustivel  no tanque: "))
r= float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ",H,",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>2*r)):
	if(h==r):
		v= ((4/3)*pi*(r**3))/2
		print("Volume:", (round((v*1000), 3)), "litros")
	elif(h<r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:",(v*1000),"litros")
	elif(h==H-r):
		v= round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)), 3)
		print("Volume:", (round((v*1000), 3)), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("Volume:", (round((v*1000), 3)), "litros")
	else: 
		v= pi*(r**2)*(H-2*r)+(4/3)*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("Volume:",(round((v*1000)), 3), "litros")
else: 
	print("Entradas invalidas")
-- EXECUTION TIME:
0.221241
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Digite a altura total do tanque: Digite o nivel de combustivel  no tanque: Digite o raio dos bojos semiesfericos inferior e superior: Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 14:06:52) 
-- CODE:
from math import*
H= float(input("Digite a altura total do tanque: "))
h= float(input("Digite o nivel de combustivel  no tanque: "))
r= float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))

print("Entradas: ",H,",", h, ",", r)

if((H>0) and (h>0) and (r>0) and (H>h) and (H>2*r)):
	if(h==r):
		v= ((4/3)*pi*(r**3))/2
		print("Volume:", (round((v*1000), 3)), "litros")
	elif(h<r):
		v= (pi/3)*(h**2)*(3*r-h)
		print("Volume:",(v*1000),"litros")
	elif(h==H-r):
		v= round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)), 3)
		print("Volume:", (round((v*1000), 3)), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("Volume:", (round((v*1000), 3)), "litros")
	else: 
		v= pi*(r**2)*(H-2*r)+(4/3)*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("Volume:",(round((v*1000)), 3), "litros")
else: 
	print("Entradas invalidas")
-- EXECUTION TIME:
0.131774
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
