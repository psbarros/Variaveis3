== TEST (2019-04-30 19:15:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print: ("Entradas:", a, ",", b, ",", c)

if((a==b) and (b==c)):
	print("equilatero")
else:
	if((a==b) or (b==c) or (a==c)):
		print("isosceles")
else:
	if((a!=b)and(b!=c)and(a!=c)):
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:16:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if((a==b) and (b==c)):
	print("equilatero")
else:
	if((a==b) or (b==c) or (a==c)):
		print("isosceles")
else:
	if((a!=b)and(b!=c)and(a!=c)):
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:16:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if((a==b) and (b==c)):
	print("equilatero")
else:
	if((a==b) or (b==c) or (a==c)):
		print("isosceles")
else:
	if((a!=b)and(b!=c)and(a!=c)):
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:17:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if((a==b) and (b==c)):
	print("equilatero")
else:
	if((a==b) or (b==c) or (a==c)):
		print("isosceles")
else:
	if((a!=b)and(b!=c)and(a!=c)):
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:20:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))


if((a==b) and (b==c)):
	x = "equilatero"
	print("equilatero")
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif ((a==b) or (b==c) or (a==c)):
	 x = "isosceles"
		print("isosceles")
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
elif ((a!=b)and(b!=c)and(a!=c)):
	x = "escaleno"
		print("escaleno")
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
else:
	x = "invalido"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
-- ERROR:
File "XXXX", line 15
    print("isosceles")
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:20:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))


if((a==b) and (b==c)):
	x = "equilatero"
	print("equilatero")
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif ((a==b) or (b==c) or (a==c)):
	 x = "isosceles"
		print("isosceles")
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
elif ((a!=b)and(b!=c)and(a!=c)):
	x = "escaleno"
		print("escaleno")
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
else:
	x = "invalido"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
-- ERROR:
File "XXXX", line 15
    print("isosceles")
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:21:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))


if((a==b) and (b==c)):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif ((a==b) or (b==c) or (a==c)):
	 x = "isosceles"
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
elif ((a!=b)and(b!=c)and(a!=c)):
	x = "escaleno"
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
else:
	x = "invalido"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
-- ERROR:
File "XXXX", line 14
    print("Entradas:", a, ",", b, ",", c)
                                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:22:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))


if((a==b) and (b==c)):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif (a==b) or (b==c) or (a==c):
	 x = "isosceles"
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
elif (a!=b)and(b!=c)and(a!=c):
	x = "escaleno"
		print("Entradas:", a, ",", b, ",", c)
		print("tipo de triangulo", x)
else:
	x = "invalido"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
-- ERROR:
File "XXXX", line 14
    print("Entradas:", a, ",", b, ",", c)
                                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:23:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))


if((a==b) and (b==c)):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif (a==b) or (b==c) or (a==c):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif (a!=b)and(b!=c)and(a!=c):
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
else:
	x = "invalido"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:24:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))


if((a==b) and (b==c)):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif (a==b) or (b==c) or (a==c):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
elif (a!=b)and(b!=c)and(a!=c):
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
else:
	x = "invalido"
	print("Entradas:", a, ",", b, ",", c)
	print("tipo de triangulo", x)
-- EXECUTION TIME:
0.144222
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:35:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))]

if((a>=b+c) or (b>=c+a) or (c>=a+b)):
	x = "invalido"
	print("Entradas":, a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas":, a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c):
	x = "isosceles"
	print("Entradas":, a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas":, a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- ERROR:
File "XXXX", line 6
    c = float(input())]
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:35:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a>=b+c) or (b>=c+a) or (c>=a+b)):
	x = "invalido"
	print("Entradas":, a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas":, a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c):
	x = "isosceles"
	print("Entradas":, a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas":, a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- ERROR:
File "XXXX", line 10
    print("Entradas":, a , "," , b , ",", c)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:36:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a>=b+c) or (b>=c+a) or (c>=a+b)):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:36:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a>=b+c) or (b>=c+a) or (c>=a+b)):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- EXECUTION TIME:
0.180761
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:37:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a>=b+c) or (b>=c+a) or (c>=a+b)):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c) or (c==a):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:37:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a>=b+c) or (b>=c+a) or (c>=a+b)):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c) or (c==a):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- EXECUTION TIME:
0.155502
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:38:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if(a>=b+c) or (b>=c+a) or (c>=a+b):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c) or (c==a):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- EXECUTION TIME:
0.150715
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:38:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if(a>=b+c) or (b>=c+a) or (c>=a+b):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
elif (a==b) or (b==c) or (c==a):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:39:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if(a>=b+c) or (b>=c+a) or (c>=a+b):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo:", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo:", x)
elif (a==b) or (b==c) or (c==a):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo:", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo:", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:39:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída.

a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if(a>=b+c) or (b>=c+a) or (c>=a+b):
	x = "invalido"
	print("Entradas:", a , "," , b , ",", c)
	print("Tipo de triangulo:", x)
elif (a==b) and (b==c):
	x = "equilatero"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo:", x)
elif (a==b) or (b==c) or (c==a):
	x = "isosceles"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo:", x)
else:
	x = "escaleno"
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo:", x)
-- EXECUTION TIME:
0.210484
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
