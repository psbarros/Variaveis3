== TEST (2019-06-13 18:24:46) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf.split(",") in est:
	if (uf.upper() == "AM")
		AM = AM + 1
	elif(uf.upper() == "PE"):
		PE = PE + 1
	elif(uf.upper() == "MG"):
		MG = MG + 1
	elif(uf.upper() == "SP"):
		SP = SP + 1
	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 12
    if (uf.upper() == "AM")
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:24:54) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf.split(",") in est:
	if (uf.upper() == "AM"):
		AM = AM + 1
	elif(uf.upper() == "PE"):
		PE = PE + 1
	elif(uf.upper() == "MG"):
		MG = MG + 1
	elif(uf.upper() == "SP"):
		SP = SP + 1
	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 11
    for uf.split(",") in est:
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:25:12) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf.split(",") in est:
	if(uf.upper() == "AM"):
		AM = AM + 1
	elif(uf.upper() == "PE"):
		PE = PE + 1
	elif(uf.upper() == "MG"):
		MG = MG + 1
	elif(uf.upper() == "SP"):
		SP = SP + 1
	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 11
    for uf.split(",") in est:
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:25:27) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for Uf.split(",") in est:
	if(uf.upper() == "AM"):
		AM = AM + 1
	elif(uf.upper() == "PE"):
		PE = PE + 1
	elif(uf.upper() == "MG"):
		MG = MG + 1
	elif(uf.upper() == "SP"):
		SP = SP + 1
	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 11
    for Uf.split(",") in est:
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:25:30) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf.split(",") in est:
	if(uf.upper() == "AM"):
		AM = AM + 1
	elif(uf.upper() == "PE"):
		PE = PE + 1
	elif(uf.upper() == "MG"):
		MG = MG + 1
	elif(uf.upper() == "SP"):
		SP = SP + 1
	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 11
    for uf.split(",") in est:
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:25:43) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.upper() == "AM"):
		AM = AM + 1
	elif(uf.upper() == "PE"):
		PE = PE + 1
	elif(uf.upper() == "MG"):
		MG = MG + 1
	elif(uf.upper() == "SP"):
		SP = SP + 1
	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:26:41) 
-- CODE:
est = input("UF de origem: ")

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.split(",").upper() == "AM"):
		AM = AM + 1
	elif(uf.split(",").upper() == "PE"):
		PE = PE + 1
	elif(uf.split(",").upper() == "MG"):
		MG = MG + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if(uf.split(",").upper() == "AM"):
AttributeError: 'list' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:27:38) 
-- CODE:
est = input("UF de origem: ").upper()

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.split(",") == "AM"):
		AM = AM + 1
	elif(uf.split(",") == "PE"):
		PE = PE + 1
	elif(uf.split(",") == "MG"):
		MG = MG + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:28:56) 
-- CODE:
est = input("UF de origem: ").upper()

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.split(",") == "AM"):
		AM = AM + 1
	elif(uf.split(",") == "PE"):
		PE = PE + 1
	elif(uf.split(",") == "MG"):
		MG = MG + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:29:15) 
-- CODE:
est = input("UF de origem: ").upper()

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.split(",") == "AM"):
		AM = AM + 1
	elif(uf.split(",") == "PE"):
		PE = PE + 1
	elif(uf.split(",") == "MG"):
		MG = MG + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
	print(vet)
		
-- ERROR:
File "XXXX", line 26
    print(vet)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:29:23) 
-- CODE:
est = input("UF de origem: ").upper()

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.split(",") == "AM"):
		AM = AM + 1
	elif(uf.split(",") == "PE"):
		PE = PE + 1
	elif(uf.split(",") == "MG"):
		MG = MG + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

	print("")
	print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0, 0]

[0, 0, 0, 0,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:29:41) 
-- CODE:
est = input("UF de origem: ").upper()

AM = 0
PE = 0
MG = 0
SP = 0
RS = 0

vet = [AM, PE, MG, SP, RS]

for uf in est:
	if(uf.split(",") == "AM"):
		AM = AM + 1
	elif(uf.split(",") == "PE"):
		PE = PE + 1
	elif(uf.split(",") == "MG"):
		MG = MG + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:32:45) 
-- CODE:
est = input("UF de origem: ").upper()


vet = [0,0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
#	elif(uf.upper() == "SP"):
		SP = SP + 1
#	elif(uf.upper() == "RS"):
		RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:34:28) 
-- CODE:
est = input("UF de origem: ").upper()


vet = [0,0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
#	elif(uf.upper() == "SP"):
		#SP = SP + 1
#	elif(uf.upper() == "RS"):
		#RS = RS + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:35:22) 
-- CODE:
est = input("UF de origem: ").upper()


vet = [0,0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.upper() == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.upper() == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:35:35) 
-- CODE:
est = input("UF de origem: ").upper()


vet = [0,0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.upper() == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.upper() == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:36:39) 
-- CODE:
est = input("UF de origem: ").upper()


vet = [0,0,0,0,0,0]

for uf in est:
	if(uf.split(',') == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.upper() == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.upper() == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:38:08) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.upper() == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.upper() == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:40:47) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.split(",") == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.split(",") == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:41:18) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf.split(",") in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.split(",") == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.split(",") == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 6
    for uf.split(",") in est:
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:41:31) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf.upper() in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.split(",") == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.split(",") == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- ERROR:
File "XXXX", line 6
    for uf.upper() in est:
       ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:41:40) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.split(",") == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.split(",") == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print("")
print(vet)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:42:23) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.split(",") == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.split(",") == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print(vet[x] >= vet[])
print(vet)
		
-- ERROR:
File "XXXX", line 20
    print(vet[x] >= vet[])
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:42:30) 
-- CODE:
est = [input("UF de origem: ").upper()]


vet = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		vet[0]= vet[0] + 1
	elif(uf.split(",") == "PE"):
		vet[1] = vet[1] + 1
	elif(uf.split(",") == "MG"):
		vet[2] = vet[2] + 1
	elif(uf.split(",") == "SP"):
		vet[3] = vet[3] + 1
	elif(uf.split(",") == "RS"):
		vet[4] = vet[4] + 1

#for uf in vet

print(vet[x] >= vet[x])
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 20, in <module>
    print(vet[x] >= vet[x])
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:46:13) 
-- CODE:
est = [input("UF de origem: ").upper()]


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

for x in v:
	if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
	print(v[0])
print(v)
		
-- ERROR:
File "XXXX", line 20
    print(v[0])
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:46:19) 
-- CODE:
est = [input("UF de origem: ").upper()]


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

for x in v:
	if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		print(v[0])
print(v)
		
-- OUTPUT:
0
0
0
0
0
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:47:42) 
-- CODE:
est = [input("UF de origem: ").upper()]


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

for x in v:
	if(v[0] >= v[0 + 1]# and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		print(v[0])
print(v)
		
-- ERROR:
File "XXXX", line 20
    print(v[0])
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:48:02) 
-- CODE:
est = [input("UF de origem: ").upper()]


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

for x in v:
	if(v[0] >= v[0]+[1]# and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		print(v[0])
print(v)
		
-- ERROR:
File "XXXX", line 20
    print(v[0])
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:49:13) 
-- CODE:
est = [input("UF de origem: ").upper()]


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

for x in v:
	if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		print(v[0])
print(v)
		
-- OUTPUT:
0
0
0
0
0
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:50:15) 
-- CODE:
est = input("UF de origem: ").upper()


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

for x in v:
	if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		print(v[0])
print(v)
		
-- OUTPUT:
0
0
0
0
0
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:50:39) 
-- CODE:
est = input("UF de origem: ").upper()


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:51:23) 
-- CODE:
est = str(input("UF de origem: ").upper())


v = [0,0,0,0,0]

for uf in est:
	if(uf.split(",") == "AM"):
		v[0] = v[0] + 1
	elif(uf.split(",") == "PE"):
		v[1] = v[1] + 1
	elif(uf.split(",") == "MG"):
		v[2] = v[2] + 1
	elif(uf.split(",") == "SP"):
		v[3] = v[3] + 1
	elif(uf.split(",") == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:53:35) 
-- CODE:
est = str(input("UF de origem: ").split()


v = [0,0,0,0,0]

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- ERROR:
File "XXXX", line 4
    v = [0,0,0,0,0]
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:53:50) 
-- CODE:
est = str(input("UF de origem: ").split())


v = [0,0,0,0,0]

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:54:57) 
-- CODE:
est = str(input("UF de origem: ").split())

v = [0,0,0,0,0]
v[0] = 0
v[1] = 0

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- OUTPUT:
[0, 0, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:55:16) 
-- CODE:
est = str(input("UF de origem: ").split())

v = [0,0,0,0,0]
v[0] = 2
v[1] = 3

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- OUTPUT:
[2, 3, 0, 0, 0]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:57:37) 
-- CODE:
est = str(input("UF de origem: ").split())

v = zeros(5, dtype=int)

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    v = zeros(5, dtype=int)
NameError: name 'zeros' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:58:26) 
-- CODE:
from numpy import *
est = str(input("UF de origem: ").split())

v = zeros(5, dtype=int)

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 18:59:05) 
-- CODE:
from numpy import *
est = str(input("UF de origem: ").split())

v = zeros(5, dtype=int)

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v[2])
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 19:08:29) 
-- CODE:
from numpy import *
est = str(input("UF de origem: ").split())

v = zeros(5, dtype=int)

for uf in est:
	if(uf.upper() == "AM"):
		v[0] = v[0] + 1
	elif(uf.upper() == "PE"):
		v[1] = v[1] + 1
	elif(uf.upper() == "MG"):
		v[2] = v[2] + 1
	elif(uf.upper() == "SP"):
		v[3] = v[3] + 1
	elif(uf.upper() == "RS"):
		v[4] = v[4] + 1

#for x in v:
	#if(v[0] >= v[1] and v[0] >= v[2] and v[0] >= v[3] and v[0] <= v[4]):
		#print(v[0])
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
