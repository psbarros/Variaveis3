== TEST (2019-04-09 19:16:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v0 = float(input("velocidade inicial: "))
a = float(input("angulo: "))
D = float(input("distancia ate o porco: "))
g = 9.8

R = (( (v0)**2)*( sin(2* (radians(a)) ) )) / g

if ( abs(D-R) < 0.1 ):
	msg = "sim"

else:
	msg = "nao"
print(msg)

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:16:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v0 = float(input("velocidade inicial: "))
a = float(input("angulo: "))
D = float(input("distancia ate o porco: "))
g = 9.8

R = (( (v0)**2)*( sin(2* (radians(a)) ) )) / g

if ( abs(D-R) < 0.1 ):
	msg = "sim"

else:
	msg = "nao"
print(msg)

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:17:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

v0 = float(input("velocidade inicial: "))
a = float(input("angulo: "))
D = float(input("distancia ate o porco: "))
g = 9.8

R = (( (v0)**2)*( sin(2* (radians(a)) ) )) / g

if ( abs(D-R) < 0.1 ):
	msg = "sim"

else:
	msg = "nao"
print(msg)

-- EXECUTION TIME:
0.217049
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
