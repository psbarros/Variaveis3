== TEST (2019-03-27 17:13:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10, 3))

-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:13:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10, 3))

-- EXECUTION TIME:
0.136549
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
10
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
10
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:13:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10, 3))

-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:13:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/5, 3))

-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:13:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/5, 3))

-- EXECUTION TIME:
0.192804
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:14:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10, 3))
print(round(10/3, 3))

-- OUTPUT:
10
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:14:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10, 3))
print(round(10/3, 3))

-- EXECUTION TIME:
0.138166
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
10
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
10
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
10
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:14:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(x, 3))
print(round(10/3, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round(x, 3))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:14:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/3, 3))

-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:14:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/3, 3))

-- EXECUTION TIME:
0.152872
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:14:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/3, 3))

-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:14:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/3, 3))

-- EXECUTION TIME:
0.128676
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:15:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/3, 3))

-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:16:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round((10/5) - 2/5, 3))

-- OUTPUT:
1.6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:16:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round((10/5) - 2/5, 3))

-- EXECUTION TIME:
0.134648
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.6
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.6
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.6
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:17:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/5 - 2/3, 3))

-- OUTPUT:
1.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:17:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10/5 - 2/3, 3))

-- EXECUTION TIME:
0.141544
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:17:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round((10/5) - 2/3, 3))

-- OUTPUT:
1.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:17:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round((10/5) - 2/3, 3))

-- EXECUTION TIME:
0.138061
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:18:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10*2/3, 3))

-- OUTPUT:
6.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:19:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10*2/3, 3))

-- EXECUTION TIME:
0.187512
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
6.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
6.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:19:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10*1/3, 3))

-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:19:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

print(round(10*1/3, 3))

-- EXECUTION TIME:
0.159945
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:21:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float("litros"))
fica = (quant/3)
print(round(fica,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    quant = input(float("litros"))
ValueError: could not convert string to float: 'litros'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:21:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float("litros"))
fica = (quant/3)
print(round(fica,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    quant = input(float("litros"))
ValueError: could not convert string to float: 'litros'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:21:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float("litros"))
fica = (quant/3)
print(round(fica, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    quant = input(float("litros"))
ValueError: could not convert string to float: 'litros'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:22:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float("quant"))
fica = (quant/3)
print(round(fica, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    quant = input(float("quant"))
ValueError: could not convert string to float: 'quant'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:23:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float(quant))
fica = (quant/3)
print(round(fica, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    quant = input(float(quant))
NameError: name 'quant' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:23:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float(quant))
fica = (quant/3)
print(round(fica, 3))

-- EXECUTION TIME:
0.271486
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1599/1446/main.py", line 5, in <module>
    quant = input(float(quant))
NameError: name 'quant' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:23:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input(float(quant))
fica = (quant/3)
print(round(fica, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    quant = input(float(quant))
NameError: name 'quant' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:23:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input("quant")
quant = float(quant)
fica = (quant/3)
print(round(fica, 3))

-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 17:23:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input("quant")
quant = float(quant)
fica = (quant/3)
print(round(fica, 3))

-- EXECUTION TIME:
0.216959
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 17:23:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

quant = input("quant")
quant = float(quant)
fica = (quant/3)
print(round(fica, 3))

-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
