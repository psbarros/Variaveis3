== SUBMITION (2019-04-10 16:30:00) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang)))/9.8

if abs(dist - R) <= 0.1:
	  print("sim")
else:
	  print("nao")
-- EXECUTION TIME:
0.20725
-- ERROR:
  File "/home/codebench/codes/1640/1055/main.py", line 9
    if abs(dist - R) <= 0.1:
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:30:24) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang)))/9.8

if abs(dist - R) <= 0.1:
	  print("sim")
else:
	  print("nao")
-- ERROR:
File "XXXX", line 9
    if abs(dist - R) <= 0.1:
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 16:30:38) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang)))/9.8

if (abs(dist - R) <= 0.1):
	  print("sim")
else:
	  print("nao")
-- EXECUTION TIME:
0.187293
-- ERROR:
  File "/home/codebench/codes/1640/1055/main.py", line 9
    if (abs(dist - R) <= 0.1):
                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:30:41) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang)))/9.8

if (abs(dist - R) <= 0.1):
	  print("sim")
else:
	  print("nao")
-- ERROR:
File "XXXX", line 9
    if (abs(dist - R) <= 0.1):
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 16:31:06) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang)))/9.8

if (mt.abs(dist - R) <= 0.1):
	  print("sim")
else:
	  print("nao")
-- ERROR:
File "XXXX", line 9
    if (mt.abs(dist - R) <= 0.1):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 18:44:04) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang)))/9.8

if(mt.abs(dist - R) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.121561
-- ERROR:
  File "/home/codebench/codes/1640/1055/main.py", line 9
    if(mt.abs(dist - R) <= 0.1):
                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 18:44:27) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang))))/9.8

if(mt.abs(dist - R) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.140236
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1640/1055/main.py", line 9, in <module>
    if(mt.abs(dist - R) <= 0.1):
AttributeError: 'module' object has no attribute 'abs'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:44:30) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang))))/9.8

if(mt.abs(dist - R) <= 0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if(mt.abs(dist - R) <= 0.1):
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 18:45:06) 
-- CODE:
import math as mt

vel = float(input())
ang = float(input())
dist = float(input())

R = ((vel**2) * (mt.sin(2*mt.radians(ang))))/9.8

if(abs(dist - R) <= 0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.155676
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
