== SUBMITION (2019-05-02 18:35:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= int(input())
b=int(input())
c=int(input())
d=int(input())
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
if((b>a) and (d>c):
	if((c<=a and d>=a)or(c<=b and d>=b)or(c==a or d==a)or(c==b or d==b)or(c>=a and c<=b)or(d<=b and d>=a)or(d>=b and c<=b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
	

-- EXECUTION TIME:
0.169277
-- ERROR:
  File "/home/codebench/codes/1693/1104/main.py", line 10
    if((b>a) and (d>c):
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 18:36:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= int(input())
b=int(input())
c=int(input())
d=int(input())
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
if((b>a) and (d>c):
	if((c<=a and d>=a)or(c<=b and d>=b)or(c==a or d==a)or(c==b or d==b)or(c>=a and c<=b)or(d<=b and d>=a)or(d>=b and c<=b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
	

-- ERROR:
File "XXXX", line 10
    if((b>a) and (d>c):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 18:37:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= int(input())
b=int(input())
c=int(input())
d=int(input())
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
if ((b > a) and (d > c)):
	if((c<=a and d>=a)or(c<=b and d>=b)or(c==a or d==a)or(c==b or d==b)or(c>=a and c<=b)or(d<=b and d>=a)or(d>=b and c<=b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
	

-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 18:37:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= float(input())
b=float(input())
c=float(input())
d=float(input())
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
if ((b > a) and (d > c)):
	if((c<=a and d>=a)or(c<=b and d>=b)or(c==a or d==a)or(c==b or d==b)or(c>=a and c<=b)or(d<=b and d>=a)or(d>=b and c<=b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
	

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 18:38:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= float(input())
b=float(input())
c=float(input())
d=float(input())
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
if ((b > a) and (d > c)):
	if((c<=a and d>=a)or(c<=b and d>=b)or(c==a or d==a)or(c==b or d==b)or(c>=a and c<=b)or(d<=b and d>=a)or(d>=b and c<=b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
	

-- EXECUTION TIME:
0.147972
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
