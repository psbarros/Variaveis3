== TEST (2019-04-16 17:49:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1 :
	 print ("sim")
else:
	 print("nao")
-- ERROR:
File "XXXX", line 10
    if (abs (d-r)<=0.1 :
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:49:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1) :
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:49:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1) :
	 print ("sim")
else:
	 print("nao")
-- EXECUTION TIME:
0.143402
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:49:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- EXECUTION TIME:
0.162424
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:49:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:50:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:50:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- EXECUTION TIME:
0.133739
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:50:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:50:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- EXECUTION TIME:
0.160898
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:50:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:50:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:51:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:51:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
	 print("nao")
-- EXECUTION TIME:
0.148993
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:51:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
 print("nao")
-- EXECUTION TIME:
0.104404
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:51:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("Digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
  print("nao")
-- EXECUTION TIME:
0.181591
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:51:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
  print("nao")
-- EXECUTION TIME:
0.130133
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:51:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
  print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:51:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
  print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:52:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo*2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
  print("nao")
-- EXECUTION TIME:
0.144215
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:52:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("digite a velocidade inicial: "))
a = float(input("Digite o angulo: "))
from math import*
g = 9.8
d = float(input("Digite a distancia horizontal: "))
r = ((vo**2)*sin(2*radians(a)))/g
if (abs (d-r)<=0.1):
	 print ("sim")
else:
  print("nao")
-- EXECUTION TIME:
0.218698
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
