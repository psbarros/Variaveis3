== TEST (2019-04-30 13:31:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (___COMPLETE AQUI___):
	# Testa se medidas correspondem aas de um triangulo
	if (___COMPLETE AQUI___):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (___COMPLETE AQUI___):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:33:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (___COMPLETE AQUI___):
	# Testa se medidas correspondem aas de um triangulo
	if (___COMPLETE AQUI___):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 11
    if (___COMPLETE AQUI___):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:34:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b >0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (___COMPLETE AQUI___):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (___COMPLETE AQUI___):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:36:12) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (s = (a + b + c) / 2.0):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (s = (a + b + c) / 2.0):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:36:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 and b > 0 and c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (s = (a + b + c) / 2.0):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (s = (a + b + c) / 2.0):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:46:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (s = (a + b + c) / 2.0):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (s = (a + b + c) / 2.0):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:46:42) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

#from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (s = (a + b + c) / 2.0):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (s = (a + b + c) / 2.0):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:46:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

#from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a > 0) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if (s = (a + b + c) / 2.0):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (s = (a + b + c) / 2.0):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:32:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

#from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c > b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'sqrt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:33:05) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

#from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c > b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'sqrt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:33:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

#from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c > b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'sqrt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:33:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c > b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:34:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 14:34:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.13389
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:35:40) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

#print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:36:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))

#print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:37:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))

#print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)
	else:
		print("Entradas:" ,a, "," ,b ,"," , c)
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 14:37:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))

#print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)
	else:
		print("Entradas:" ,a, "," ,b ,"," , c)
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.24903
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:38:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))

#print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)
	else:
		print("Entradas:" ,a, "," ,b ,"," , c)
		print("Area: invalida")
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 14:38:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))

#print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if(a != 0) and (b != 0) and (c != 0):
	if(c < b < a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area1 = round(area, 3)
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)
	else:
		print("Entradas:" ,a, "," ,b ,"," , c)
		print("Area: invalida")
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- EXECUTION TIME:
0.132887
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:51:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)
elif((a > b) and (b > c)):
	print()
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:52:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)
elif((a > b) and (b > c)):
	print("Entradas:", a, "," ,b, ",", c)
	print("Area:", area1)
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 14:52:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)
elif((a > b) and (b > c)):
	print("Entradas:", a, "," ,b, ",", c)
	print("Area:", area1)
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- EXECUTION TIME:
0.170646
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:55:39) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)
elif()	
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    elif()	
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:57:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)	
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:10:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)	
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:11:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if(a != 0) and (b == 0) and (c == 0):
	print("Entradas: ", a, "," , b , "," ,c)
	print("Area:", area1)	
else:
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")

-- EXECUTION TIME:
0.178099
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:15:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
elif
	if(a != 0) and (b == 0) and (c == 0):
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)	
	else:
		print("Entradas:" , a, ",", b, "," ,c)
		print("Area: invalida")

-- ERROR:
File "XXXX", line 10
    elif
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:41:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if ((a >= b + c) or (b >= a + c) or (c >= a + b)) 
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")
else:
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)	
	
		

-- ERROR:
File "XXXX", line 10
    if ((a >= b + c) or (b >= a + c) or (c >= a + b)) 
                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:42:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if ((a >= b + c) or (b >= a + c) or (c >= a + b)): 
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")
else:
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)	
	
		

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:42:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *
a = float(input (" "))
b = float(input (" "))
c = float(input (" "))
s = (a + b + c) / 2.0
area = sqrt(s * (s - a) * (s - b) * (s - c))
area1 = round(area,3)
if ((a >= b + c) or (b >= a + c) or (c >= a + b)): 
	print("Entradas:" , a, ",", b, "," ,c)
	print("Area: invalida")
else:
		print("Entradas: ", a, "," , b , "," ,c)
		print("Area:", area1)	
	
		

-- EXECUTION TIME:
0.13441
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas:  1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
